package com.mygdx.game;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.graphics.Texture;import com.badlogic.gdx.graphics.g2d.BitmapFont;import com.badlogic.gdx.graphics.g2d.Sprite;import com.badlogic.gdx.graphics.g2d.SpriteBatch;import com.badlogic.gdx.math.Vector2;import com.badlogic.gdx.scenes.scene2d.Stage;import com.badlogic.gdx.utils.viewport.Viewport;import java.util.Timer;import static com.mygdx.game.ArenaGame.gameMusic;import static java.lang.StrictMath.abs;public class GameHUD extends BaseJoystick {    public final Viewport viewport;    private Player pl;    final BitmapFont font;    private Stage stage;    private Buttons jumpbtn;    private Buttons settingbtn;    private Buttons volumeButton;    private SettingsDialog dialog;    private Texture timePanel;    private Timer timer;    private BitmapFont timeBitmap;    private Texture hpPanel;    private Texture hpScale;    private Texture hpLowScale;//Для врага    public GameHUD(Stage s,Viewport view,Player pl) {        this.viewport = view;        this.stage=s;        this.pl=pl;        font = new BitmapFont(Gdx.files.internal("liter.fnt"));        font.setColor(Color.BLACK);        stage.addActor(this);    }    public Texture getTimePanel() {        return timePanel;    }    public BitmapFont getTimeBitmap() {        return timeBitmap;    }    public Timer getTimer() {        return timer;    }    public void setjumpButton(int x, int y, String name, int width, int height, Texture texture){        jumpbtn=new Buttons(x,y,name,width,height,stage,texture,texture);        jumpbtn.btn.setColor(1,1,1,0.5f);    }    public void setSettingsButton(int x, int y, String name, int width, int height, Texture texture){        settingbtn=new Buttons(x,y,name,width,height,stage,texture,texture);        //settingbtn.btn.setColor(1,1,1,0.5f);    }    public void setSettings(float size){        dialog=new SettingsDialog(size,stage);        volumeButton=new Buttons(dialog.xScale+dialog.volumeScale.getWidth()-dialog.volumeTxt.getWidth(),dialog.yScale-dialog.volumeTxt.getHeight()/4,                "volButt",dialog.volumeTxt.getWidth(),dialog.volumeTxt.getHeight(),dialog.getSt(),dialog.volumeTxt,dialog.volumeTxt);       dialog.addButton(volumeButton);       stage.addActor(volumeButton);    }    public void setTimePanel(){        timePanel=new Texture("Time Panel.png");        timeBitmap=new BitmapFont();        timeBitmap=new BitmapFont(Gdx.files.internal("liter.fnt"));        timeBitmap.getData().setScale(2.25f);        timeBitmap.setColor(new Color(0,1,0,0.4f));        timer = new Timer();        timer.schedule(new TimerPlay(), 0, 1000);    }    public void drawTimer(float delta, SpriteBatch batch){        batch.draw(timePanel,70,stage.getHeight()-2.3f*timePanel.getHeight());        timeBitmap.draw(batch,MainGame.time,50+timePanel.getWidth()/2,stage.getHeight()-1.6f*timePanel.getHeight());    }    public void setHpPanel(){        hpPanel=new Texture("Health Panel.png");        hpScale=new Texture("Health Bar.png");        Sprite hpSprite=new Sprite(hpScale);    }    public void drawHpPanel(float delta, SpriteBatch batch){    }    @Override    public boolean touchDown(int screenX, int screenY, int pointer, int button) {        if ((screenY > jumpbtn.btn.getY() && screenY < jumpbtn.btn.getY() + jumpbtn.btn.getHeight()+100)                && (screenX > jumpbtn.btn.getX() && screenX < jumpbtn.btn.getX() + jumpbtn.btn.getWidth())) {            if (pl.getJumpState()==Player.JumpState.GROUNDED)                MainGame.jumped = true;        }        if ((abs(Gdx.graphics.getHeight()-screenY) > settingbtn.btn.getY() && abs(Gdx.graphics.getHeight()-screenY) < settingbtn.btn.getY() + settingbtn.btn.getHeight()+100)                && (screenX > settingbtn.btn.getX() && screenX < settingbtn.btn.getX() + settingbtn.btn.getWidth())) {            if (!MainGame.isSettingsDialogOpened) {                float prevVolumePosition;                if (MainGame.volButtonX!=-1){                    prevVolumePosition=MainGame.volButtonX;                    volumeButton.btn.setX(prevVolumePosition);                    System.out.println("changed");                }                dialog.setVisible(true);                for (Buttons butt : dialog.getbArray()) {                    butt.setVisible(true);                }                MainGame.isSettingsDialogOpened=true;            }            else{                MainGame.volume=dialog.getDistance()/dialog.getDistanceGeneral();                gameMusic.setVolume(MainGame.volume);                dialog.setVisible(false);                for (Buttons butt : dialog.getbArray()) {                    butt.setVisible(false);                }                MainGame.isSettingsDialogOpened=false;            }        }        return true;    }    @Override    public boolean touchDragged(int screenX, int screenY, int pointer) {        if (MainGame.isSettingsDialogOpened){            if (abs(Gdx.graphics.getHeight()-screenY)>=volumeButton.btn.getY() && abs(Gdx.graphics.getHeight()-screenY)<=volumeButton.btn.getY()+volumeButton.btn.getHeight()) {                Vector2 previous = new Vector2(volumeButton.btn.getX(), volumeButton.btn.getY());                volumeButton.btn.setX(screenX);                if (volumeButton.btn.getX() <= dialog.xScale || volumeButton.btn.getX() >= (dialog.xScale + dialog.volumeScale.getWidth() - dialog.volumeTxt.getWidth()))                    volumeButton.btn.setPosition(previous.x, previous.y);                if (screenX >= dialog.xScale && screenX <= dialog.xScale + dialog.volumeScale.getWidth()) {                    dialog.setDistance(screenX - dialog.xScale);                    MainGame.volButtonX=volumeButton.btn.getX();                }                if (screenX <= dialog.xScale) {                    dialog.setDistance(0);                    MainGame.volButtonX=dialog.xScale;                }                if (screenX >= dialog.xScale + dialog.volumeScale.getWidth() - dialog.volumeTxt.getWidth()) {                    dialog.setDistance(dialog.getDistanceGeneral());                    MainGame.volButtonX=dialog.xScale + dialog.volumeScale.getWidth() - dialog.volumeTxt.getWidth();                }            }        }        return true;    }}